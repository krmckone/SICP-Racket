#lang racket

(define (variable? x) (symbol? x))
(define (same-variable? v1 v2)
  (and (variable? v1) (variable? v2) (eq? v1 v2)))
(define (=number? exp num) (and (number? exp) (= exp num)))
(define (make-sum a1 a2) (list '+ a1 a2))
(define (make-product m1 m2) (list '* m1 m2))
(define (make-exponentiation base exponent)
  (cond ((=number? base 0) 0)
        ((=number? exponent 0) 1)
        ((=number? exponent 1) base)
        (else (list '** base exponent))))
(define (base ex) (cadr ex))
(define (exponent ex) (caddr ex))
(define (addend s) (cadr s))
(define (augend s) (caddr s))
(define (multiplier p) (cadr p))
(define (multiplicand p) (caddr p))

(define (install-deriv-exponent-package)
  (define (deriv exp var)
    (make-product (exponent exp)
                  (make-product (make-exponentiation (base exp) (- (exponent exp) 1))
                                (deriv (base exp) var))))
  (put 'deriv '(**) deriv))
                                                           
(define (install-deriv-sum-package)
  (define (deriv exp var)
    (make-sum (deriv (addend exp) var)
              (deriv (augend exp var))))
  (put 'deriv '(+) deriv))


(define (install-deriv-product-package)
  (define (deriv exp var)
    (make-sum
     (make-product (multiplier exp)
                   (deriv (multiplicand exp) var))
     (make-product (deriv (multiplier exp) var)
                   (multiplicand exp))))
  (put 'deriv '(*) deriv))


(define (deriv exp var)
  (cond ((number? exp) 0)
        ((variable? exp) (if (same-variable? exp var) 1 0))
        (else ((get 'deriv (operator exp)) (operands exp)
                                           var))))


(define (operator exp) (car exp))
(define (operands exp) (cdr exp))

